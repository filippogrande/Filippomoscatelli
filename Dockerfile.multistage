# Multi-stage Dockerfile per build piÃ¹ efficiente
# Stage 1: Clone del repository
FROM alpine/git as cloner

WORKDIR /tmp
RUN git clone https://github.com/filippogrande/Filippomoscatelli.git

# Stage 2: Build finale con nginx
FROM nginx:1.29.1-alpine-slim

# Install curl for health checks
RUN apk add --no-cache curl

# Set working directory
WORKDIR /usr/share/nginx/html

# Remove default nginx static assets
RUN rm -rf /usr/share/nginx/html/*

# Copy website files from cloned repository
COPY --from=cloner /tmp/Filippomoscatelli/index.html ./
COPY --from=cloner /tmp/Filippomoscatelli/css/ ./css/
COPY --from=cloner /tmp/Filippomoscatelli/js/ ./js/
COPY --from=cloner /tmp/Filippomoscatelli/data/ ./data/
COPY --from=cloner /tmp/Filippomoscatelli/FoodDelivery/ ./FoodDelivery/

# Copy optional files (use shell to handle wildcards)
RUN --mount=from=cloner,source=/tmp/Filippomoscatelli,target=/source \
    find /source -name "*.pdf" -exec cp {} ./ \; 2>/dev/null || true && \
    find /source -name "*.png" -exec cp {} ./ \; 2>/dev/null || true && \
    find /source -name "*.svg" -exec cp {} ./ \; 2>/dev/null || true

# Copy nginx configuration
COPY --from=cloner /tmp/Filippomoscatelli/nginx.conf /etc/nginx/nginx.conf

# Set proper permissions
RUN chmod -R 755 /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
